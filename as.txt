Below is a **from‐scratch**, **step‐by‐step** guide for building an **Angular 17** blog application that **integrates** with your **existing Node/Express (Node 22) backend**. It includes **detailed instructions** on creating components, services, routing, and authentication, as well as **test prompts** at each step.

I will **not assume** or skip steps; each section includes explicit directions and **verification** methods so you can confirm everything is working.

---

# Table of Contents

1. [Environment & Prerequisites](#step-1-environment--prerequisites)  
2. [Create a New Angular 17 App](#step-2-create-a-new-angular-17-app)  
3. [Initial Run & Test](#step-3-initial-run--test)  
4. [Add Bootstrap & Configure Styling](#step-4-add-bootstrap--configure-styling)  
5. [Set Up Basic Routing & Home Component](#step-5-set-up-basic-routing--home-component)  
6. [Generate and Implement Core Components (Navbar, NotFound, etc.)](#step-6-generate-and-implement-core-components-navbar-notfound-etc)  
7. [Set Up Proxy for Backend API Calls](#step-7-set-up-proxy-for-backend-api-calls)  
8. [Create Services: Auth & Post](#step-8-create-services-auth--post)  
9. [Implement Authentication (Register & Login)](#step-9-implement-authentication-register--login)  
10. [Implement CRUD for Posts (PostList, PostDetail, PostForm)](#step-10-implement-crud-for-posts-postlist-postdetail-postform)  
11. [Protect Routes (Optional - AuthGuard)](#step-11-protect-routes-optional---authguard)  
12. [Final Testing & Integration Checks](#step-12-final-testing--integration-checks)  

---

## Step 1. Environment & Prerequisites
1. **Node.js 22**: Confirm you have Node 22 installed (or a compatible version).  
   - Check by running in terminal:
     ```bash
     node -v
     ```
2. **npm**: Should come bundled with Node. Verify:
   ```bash
   npm -v
   ```
3. **Angular CLI**: Install or update globally:
   ```bash
   npm install -g @angular/cli
   ng version
   ```
   - Ensure you have Angular CLI 17 or close to it.

4. **Existing Backend**:  
   - Confirm your Node/Express backend is **already set up** and tested.  
   - You should have endpoints like:
     - `POST /api/auth/register`  
     - `POST /api/auth/login`  
     - `GET /api/posts`, `POST /api/posts`, `PUT /api/posts/:id`, `DELETE /api/posts/:id`  
   - If you have not started your backend, or you need to reference your `.env`, do that later. For now, we’re focusing on the frontend.

**Verification**:  
- Run `node -v`, `npm -v`, and `ng version`. Confirm no errors.  
- Optionally, start your backend on port `3000` to ensure it’s ready:
  ```bash
  npm run dev   // or node server.js, depending on your scripts
  ```

---

## Step 2. Create a New Angular 17 App
1. **Choose** a folder on your machine where you want to place the frontend code.  
2. **Run**:
   ```bash
   ng new blog-frontend
   ```
   - **Questions**:
     - Would you like to add Angular routing? → **Yes**  
     - Which stylesheet format? → **CSS** (or your preference: SCSS, SASS, etc.)
3. **Wait** until Angular finishes creating the project. It will create a `blog-frontend` folder.

**Verification**:
- Navigate into `blog-frontend`:
  ```bash
  cd blog-frontend
  ```
- List files (`ls` or `dir`) and confirm you see `src/`, `angular.json`, `package.json`, etc.

---

## Step 3. Initial Run & Test
1. **Compile & serve** the brand new Angular app:
   ```bash
   ng serve
   ```
   - By default, it should run on [http://localhost:4200](http://localhost:4200).
2. **Open** your browser to [http://localhost:4200](http://localhost:4200).  
   - You should see the default Angular welcome screen (“Welcome to blog-frontend!” or a similar message).

**Verification**:  
- Confirm no errors appear in the terminal.  
- Confirm the page loads in your browser.

---

## Step 4. Add Bootstrap & Configure Styling
1. **Install Bootstrap 5** (latest 5.x):
   ```bash
   npm install bootstrap@5
   ```
2. **Open `angular.json`**. Find `"styles"` array under the `"build"` configuration.  
   Add the Bootstrap path:
   ```jsonc
   "styles": [
     "node_modules/bootstrap/dist/css/bootstrap.min.css",
     "src/styles.css"
   ],
   ```
3. **(Optional)** Create a `.container` test in `app.component.html`:
   ```html
   <div class="container">
     <h1>Test Bootstrap</h1>
   </div>
   ```
4. **Re-run** your Angular app (or if it’s still running, it auto-compiles).
   ```bash
   ng serve
   ```
5. **Check** you see the “Test Bootstrap” text with default Bootstrap styling (fonts, spacing, etc.).

**Verification**:  
- In the browser, the `<h1>` should appear with Bootstrap’s default fonts and margins.  
- Inspect element to confirm `.container` class is recognized (not the default Angular styling alone).

---

## Step 5. Set Up Basic Routing & Home Component
1. Angular typically creates `app-routing.module.ts` for you (because you said “Yes” to routing).
2. **Check** `app-routing.module.ts` in `src/app/`. It might look like:
   ```typescript
   import { NgModule } from '@angular/core';
   import { RouterModule, Routes } from '@angular/router';

   const routes: Routes = [];

   @NgModule({
     imports: [RouterModule.forRoot(routes)],
     exports: [RouterModule]
   })
   export class AppRoutingModule { }
   ```
3. **Create a HomeComponent** to serve as the homepage:
   ```bash
   ng generate component components/home
   ```
4. **Add a route** for the home path in `app-routing.module.ts`:
   ```typescript
   import { NgModule } from '@angular/core';
   import { RouterModule, Routes } from '@angular/router';
   import { HomeComponent } from './components/home/home.component';

   const routes: Routes = [
     { path: '', component: HomeComponent },
     // We'll add more routes later
   ];

   @NgModule({
     imports: [RouterModule.forRoot(routes)],
     exports: [RouterModule]
   })
   export class AppRoutingModule {}
   ```
5. **Place** a `<router-outlet>` in `app.component.html`:
   ```html
   <router-outlet></router-outlet>
   ```
   This is required for routing to show different pages.

6. **Check** `HomeComponent` (`home.component.html`) has some placeholder text:
   ```html
   <div class="container mt-3">
     <h2>Welcome to the Blog Home</h2>
   </div>
   ```

**Verification**:  
- **Restart** or continue `ng serve`.  
- Go to [http://localhost:4200](http://localhost:4200).  
- You should see “Welcome to the Blog Home” (or whatever you wrote) instead of the default Angular page.

---

## Step 6. Generate and Implement Core Components (Navbar, NotFound, etc.)

### 6.1. Navbar
1. **Generate** a navbar component:
   ```bash
   ng generate component components/navbar
   ```
2. **Open** `navbar.component.html`. Add a simple Bootstrap navbar:
   ```html
   <nav class="navbar navbar-expand-lg navbar-light bg-light">
     <div class="container-fluid">
       <a class="navbar-brand" routerLink="/">BlogApp</a>
       <button
         class="navbar-toggler"
         type="button"
         data-bs-toggle="collapse"
         data-bs-target="#navbarNav"
         aria-controls="navbarNav"
         aria-expanded="false"
         aria-label="Toggle navigation"
       >
         <span class="navbar-toggler-icon"></span>
       </button>
       <div class="collapse navbar-collapse" id="navbarNav">
         <ul class="navbar-nav">
           <li class="nav-item">
             <a class="nav-link" routerLink="/posts">Posts</a>
           </li>
           <li class="nav-item">
             <a class="nav-link" routerLink="/create">Create Post</a>
           </li>
           <li class="nav-item">
             <a class="nav-link" routerLink="/login">Login</a>
           </li>
           <li class="nav-item">
             <a class="nav-link" routerLink="/register">Register</a>
           </li>
         </ul>
       </div>
     </div>
   </nav>
   ```
3. **Include** `<app-navbar>` in `app.component.html` (above the `<router-outlet>`):
   ```html
   <app-navbar></app-navbar>
   <router-outlet></router-outlet>
   ```

### 6.2. NotFound Component
1. **Generate** a NotFound component:
   ```bash
   ng generate component components/not-found
   ```
2. **Add** a route for it in `app-routing.module.ts` (usually as a wildcard):
   ```typescript
   const routes: Routes = [
     { path: '', component: HomeComponent },
     // ...other routes
     { path: '**', component: NotFoundComponent },
   ];
   ```
   That means any route not matched will go to `NotFoundComponent`.

**Verification**:  
- **Restart** or continue `ng serve`.  
- Visit [http://localhost:4200/anyrandompath](http://localhost:4200/anyrandompath).  
- You should see the NotFound component’s text (e.g., “404: Page Not Found”).

---

## Step 7. Set Up Proxy for Backend API Calls
We want to **connect** to your Node/Express backend running on `localhost:3000`.

1. **Create** `proxy.conf.json` in the **root** of the Angular project (same level as `package.json`).  
   Example:
   ```json
   {
     "/api": {
       "target": "http://localhost:3000",
       "secure": false,
       "changeOrigin": true
     }
   }
   ```
2. **Open** `package.json` and update the `"start"` script to use this proxy:
   ```jsonc
   "scripts": {
     "start": "ng serve --proxy-config proxy.conf.json",
     // ...
   }
   ```
3. **Kill** the current `ng serve` process (if running).
4. **Re-run** your app:
   ```bash
   npm start
   ```
   or 
   ```bash
   ng serve --proxy-config proxy.conf.json
   ```

**Verification**:  
- Confirm no errors on startup.  
- Once we build services to call `/api/...`, it will forward to `localhost:3000`.

---

## Step 8. Create Services: Auth & Post

We’ll make two services that talk to the backend: **AuthService** for registration/login, and **PostService** for blog posts CRUD.

### 8.1. Auth Service

1. **Generate** service:
   ```bash
   ng generate service services/auth
   ```
2. **Open** `auth.service.ts`. Add minimal logic:
   ```typescript
   // src/app/services/auth.service.ts
   import { Injectable } from '@angular/core';
   import { HttpClient } from '@angular/common/http';
   import { Observable } from 'rxjs';

   interface LoginResponse {
     token: string;
   }

   @Injectable({
     providedIn: 'root'
   })
   export class AuthService {
     private baseUrl = '/api/auth'; // proxy will forward to http://localhost:3000/api/auth

     constructor(private http: HttpClient) {}

     register(userData: { username: string; email: string; password: string }): Observable<any> {
       return this.http.post(`${this.baseUrl}/register`, userData);
     }

     login(credentials: { email: string; password: string }): Observable<LoginResponse> {
       return this.http.post<LoginResponse>(`${this.baseUrl}/login`, credentials);
     }

     // For storing token in localStorage
     storeToken(token: string) {
       localStorage.setItem('authToken', token);
     }

     getToken(): string | null {
       return localStorage.getItem('authToken');
     }

     logout() {
       localStorage.removeItem('authToken');
     }

     isLoggedIn(): boolean {
       return !!this.getToken();
     }
   }
   ```

3. **Import** `HttpClientModule` in `app.module.ts` if not already done:
   ```typescript
   import { HttpClientModule } from '@angular/common/http';

   @NgModule({
     declarations: [ ... ],
     imports: [
       BrowserModule,
       HttpClientModule,
       // ...
     ],
     bootstrap: [AppComponent]
   })
   export class AppModule {}
   ```

### 8.2. Post Service

1. **Generate** service:
   ```bash
   ng generate service services/post
   ```
2. **Open** `post.service.ts`. Add basic CRUD methods:
   ```typescript
   // src/app/services/post.service.ts
   import { Injectable } from '@angular/core';
   import { HttpClient, HttpHeaders } from '@angular/common/http';
   import { Observable } from 'rxjs';

   export interface Post {
     _id?: string;
     title: string;
     content: string;
     attachment?: string;
     createdAt?: string;
   }

   @Injectable({
     providedIn: 'root'
   })
   export class PostService {
     private baseUrl = '/api/posts'; // proxy -> http://localhost:3000/api/posts

     constructor(private http: HttpClient) {}

     getPosts(): Observable<Post[]> {
       return this.http.get<Post[]>(this.baseUrl);
     }

     getPost(id: string): Observable<Post> {
       return this.http.get<Post>(`${this.baseUrl}/${id}`);
     }

     // For file upload, we might use FormData
     createPost(formData: FormData): Observable<Post> {
       return this.http.post<Post>(this.baseUrl, formData);
     }

     updatePost(id: string, formData: FormData): Observable<Post> {
       return this.http.put<Post>(`${this.baseUrl}/${id}`, formData);
     }

     deletePost(id: string): Observable<any> {
       return this.http.delete(`${this.baseUrl}/${id}`);
     }
   }
   ```

**Verification**:  
- Confirm no compile errors.  
- We’ll test these services once we hook them into components (login, register, posts).

---

## Step 9. Implement Authentication (Register & Login)

### 9.1. Generate Login & Register Components
```bash
ng generate component components/register
ng generate component components/login
```

### 9.2. Add Routes
1. In `app-routing.module.ts`:
   ```typescript
   import { RegisterComponent } from './components/register/register.component';
   import { LoginComponent } from './components/login/login.component';

   const routes: Routes = [
     { path: '', component: HomeComponent },
     { path: 'login', component: LoginComponent },
     { path: 'register', component: RegisterComponent },
     // ...
     { path: '**', component: NotFoundComponent }
   ];
   ```

### 9.3. Register Component
1. **Open** `register.component.html`:
   ```html
   <div class="container mt-4">
     <h2>Register</h2>
     <form (ngSubmit)="onSubmit()" #registerForm="ngForm">
       <div class="mb-3">
         <label for="username" class="form-label">Username</label>
         <input
           type="text"
           id="username"
           class="form-control"
           required
           [(ngModel)]="user.username"
           name="username"
         />
       </div>
       <div class="mb-3">
         <label for="email" class="form-label">Email</label>
         <input
           type="email"
           id="email"
           class="form-control"
           required
           [(ngModel)]="user.email"
           name="email"
         />
       </div>
       <div class="mb-3">
         <label for="password" class="form-label">Password</label>
         <input
           type="password"
           id="password"
           class="form-control"
           required
           [(ngModel)]="user.password"
           name="password"
         />
       </div>
       <button type="submit" class="btn btn-primary">Register</button>
     </form>
   </div>
   ```

2. **Open** `register.component.ts`:
   ```typescript
   import { Component } from '@angular/core';
   import { AuthService } from 'src/app/services/auth.service';

   @Component({
     selector: 'app-register',
     templateUrl: './register.component.html'
   })
   export class RegisterComponent {
     user = { username: '', email: '', password: '' };

     constructor(private authService: AuthService) {}

     onSubmit() {
       this.authService.register(this.user).subscribe({
         next: (res) => {
           alert('User registered successfully!');
         },
         error: (err) => {
           console.error('Registration error:', err);
           alert('Registration failed. Check console for details.');
         }
       });
     }
   }
   ```

### 9.4. Login Component
1. **Open** `login.component.html`:
   ```html
   <div class="container mt-4">
     <h2>Login</h2>
     <form (ngSubmit)="onLogin()" #loginForm="ngForm">
       <div class="mb-3">
         <label for="email" class="form-label">Email</label>
         <input
           type="email"
           id="email"
           class="form-control"
           required
           [(ngModel)]="credentials.email"
           name="email"
         />
       </div>
       <div class="mb-3">
         <label for="password" class="form-label">Password</label>
         <input
           type="password"
           id="password"
           class="form-control"
           required
           [(ngModel)]="credentials.password"
           name="password"
         />
       </div>
       <button type="submit" class="btn btn-primary">Login</button>
     </form>
   </div>
   ```

2. **Open** `login.component.ts`:
   ```typescript
   import { Component } from '@angular/core';
   import { AuthService } from 'src/app/services/auth.service';
   import { Router } from '@angular/router';

   @Component({
     selector: 'app-login',
     templateUrl: './login.component.html'
   })
   export class LoginComponent {
     credentials = { email: '', password: '' };

     constructor(private authService: AuthService, private router: Router) {}

     onLogin() {
       this.authService.login(this.credentials).subscribe({
         next: (res) => {
           // store token
           this.authService.storeToken(res.token);
           alert('Login successful!');
           this.router.navigate(['/']);  // go to Home or some other page
         },
         error: (err) => {
           console.error('Login error:', err);
           alert('Invalid credentials or server error.');
         }
       });
     }
   }
   ```

**Verification**:
1. **Start** your backend on port 3000, ensure you have `/api/auth/register` and `/api/auth/login` endpoints working.
2. **In Angular**: run `npm start` (with proxy).  
3. **Navigate** to [http://localhost:4200/register](http://localhost:4200/register), fill out the form, and see if it succeeds in registering.  
4. **Check** your database or backend logs for the new user.  
5. **Go** to [http://localhost:4200/login](http://localhost:4200/login), enter credentials, and see if you get a token stored in localStorage.  
6. **Open** dev tools (F12 → Application tab → Local Storage) to confirm `authToken` is set.

---

## Step 10. Implement CRUD for Posts (PostList, PostDetail, PostForm)

### 10.1. Generate Post Components
1. **PostList** (to display all posts):
   ```bash
   ng generate component components/post-list
   ```
2. **PostDetail** (to view a single post by ID):
   ```bash
   ng generate component components/post-detail
   ```
3. **PostForm** (to create or edit):
   ```bash
   ng generate component components/post-form
   ```

### 10.2. Add Routes for Posts
In `app-routing.module.ts`:
```typescript
import { PostListComponent } from './components/post-list/post-list.component';
import { PostDetailComponent } from './components/post-detail/post-detail.component';
import { PostFormComponent } from './components/post-form/post-form.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'posts', component: PostListComponent },
  { path: 'post/:id', component: PostDetailComponent },
  { path: 'create', component: PostFormComponent },
  { path: 'edit/:id', component: PostFormComponent },
  { path: 'login', component: LoginComponent },
  { path: 'register', component: RegisterComponent },
  { path: '**', component: NotFoundComponent }
];
```

### 10.3. PostList Component
**Display** all posts retrieved from the backend.

- **`post-list.component.ts`**:
  ```typescript
  import { Component, OnInit } from '@angular/core';
  import { PostService, Post } from 'src/app/services/post.service';

  @Component({
    selector: 'app-post-list',
    templateUrl: './post-list.component.html'
  })
  export class PostListComponent implements OnInit {
    posts: Post[] = [];

    constructor(private postService: PostService) {}

    ngOnInit(): void {
      this.postService.getPosts().subscribe({
        next: (data) => {
          this.posts = data;
        },
        error: (err) => console.error('Error fetching posts:', err)
      });
    }
  }
  ```

- **`post-list.component.html`**:
  ```html
  <div class="container mt-4">
    <h2>Blog Posts</h2>
    <div class="row">
      <div class="col-md-4 mb-4" *ngFor="let post of posts">
        <div class="card">
          <div class="card-body">
            <h5 class="card-title">{{ post.title }}</h5>
            <p class="card-text">{{ post.content | slice:0:100 }}...</p>
            <a [routerLink]="['/post', post._id]" class="btn btn-primary">Read More</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  ```

### 10.4. PostDetail Component
**Shows** one post in detail with an option to edit or delete.

- **`post-detail.component.ts`**:
  ```typescript
  import { Component, OnInit } from '@angular/core';
  import { ActivatedRoute, Router } from '@angular/router';
  import { PostService, Post } from 'src/app/services/post.service';

  @Component({
    selector: 'app-post-detail',
    templateUrl: './post-detail.component.html'
  })
  export class PostDetailComponent implements OnInit {
    post!: Post;

    constructor(
      private route: ActivatedRoute,
      private router: Router,
      private postService: PostService
    ) {}

    ngOnInit(): void {
      const id = this.route.snapshot.paramMap.get('id');
      if (id) {
        this.postService.getPost(id).subscribe({
          next: (data) => {
            this.post = data;
          },
          error: (err) => console.error('Error fetching post:', err)
        });
      }
    }

    deletePost() {
      if (!this.post._id) return;
      this.postService.deletePost(this.post._id).subscribe({
        next: () => {
          alert('Post deleted successfully');
          this.router.navigate(['/posts']);
        },
        error: (err) => console.error('Delete error:', err)
      });
    }
  }
  ```

- **`post-detail.component.html`**:
  ```html
  <div class="container mt-4" *ngIf="post">
    <h2>{{ post.title }}</h2>
    <p>{{ post.content }}</p>
    <!-- If there's an attachment, you can display an image or a link here -->

    <button (click)="deletePost()" class="btn btn-danger">Delete</button>
    <a [routerLink]="['/edit', post._id]" class="btn btn-warning ms-2">Edit</a>
  </div>
  ```

### 10.5. PostForm Component (Create/Update)
We’ll reuse the same form for creating a new post and editing an existing one. If the URL has `:id`, we **edit**; otherwise, we **create**.

- **`post-form.component.ts`**:
  ```typescript
  import { Component, OnInit } from '@angular/core';
  import { ActivatedRoute, Router } from '@angular/router';
  import { PostService, Post } from 'src/app/services/post.service';

  @Component({
    selector: 'app-post-form',
    templateUrl: './post-form.component.html'
  })
  export class PostFormComponent implements OnInit {
    post: Post = { title: '', content: '' };
    isEditMode = false;
    selectedFile?: File;

    constructor(
      private route: ActivatedRoute,
      private router: Router,
      private postService: PostService
    ) {}

    ngOnInit(): void {
      const id = this.route.snapshot.paramMap.get('id');
      if (id) {
        this.isEditMode = true;
        this.postService.getPost(id).subscribe({
          next: (data) => {
            this.post = data;
          },
          error: (err) => console.error('Error loading post:', err)
        });
      }
    }

    onFileSelected(event: any) {
      this.selectedFile = event.target.files[0];
    }

    onSubmit() {
      const formData = new FormData();
      formData.append('title', this.post.title);
      formData.append('content', this.post.content);
      if (this.selectedFile) {
        formData.append('attachment', this.selectedFile);
      }

      if (this.isEditMode && this.post._id) {
        this.postService.updatePost(this.post._id, formData).subscribe({
          next: () => {
            alert('Post updated successfully');
            this.router.navigate(['/posts']);
          },
          error: (err) => console.error('Update error:', err)
        });
      } else {
        this.postService.createPost(formData).subscribe({
          next: () => {
            alert('Post created successfully');
            this.router.navigate(['/posts']);
          },
          error: (err) => console.error('Create error:', err)
        });
      }
    }
  }
  ```

- **`post-form.component.html`**:
  ```html
  <div class="container mt-4">
    <h2>{{ isEditMode ? 'Edit Post' : 'Create Post' }}</h2>
    <form (ngSubmit)="onSubmit()">
      <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <input
          type="text"
          id="title"
          class="form-control"
          [(ngModel)]="post.title"
          name="title"
          required
        />
      </div>

      <div class="mb-3">
        <label for="content" class="form-label">Content</label>
        <textarea
          id="content"
          class="form-control"
          [(ngModel)]="post.content"
          name="content"
          rows="5"
          required
        ></textarea>
      </div>

      <div class="mb-3">
        <label for="attachment" class="form-label">Attachment (optional)</label>
        <input
          type="file"
          id="attachment"
          class="form-control"
          (change)="onFileSelected($event)"
        />
      </div>

      <button type="submit" class="btn btn-primary">
        {{ isEditMode ? 'Update' : 'Create' }} Post
      </button>
    </form>
  </div>
  ```

**Verification**:
1. **Restart** or keep `ng serve` running.  
2. **Go** to [http://localhost:4200/posts](http://localhost:4200/posts). If you have existing posts in your DB, they should appear.  
3. **Click** on a post card to see details at `/post/:id`.  
4. **Create** a new post at [http://localhost:4200/create](http://localhost:4200/create). Check if it appears in `/posts`.  
5. **Edit** a post by going to [http://localhost:4200/edit/:id](http://localhost:4200/edit/:id). See if the updated fields are saved.  
6. **Delete** a post from the PostDetail page. Confirm it’s removed from the DB.

---

## Step 11. Protect Routes (Optional - AuthGuard)

If you want to **require login** before creating/editing posts:

1. **Generate** an AuthGuard:
   ```bash
   ng generate guard guards/auth
   ```
2. **Open** `auth.guard.ts`:
   ```typescript
   import { Injectable } from '@angular/core';
   import { CanActivate, Router } from '@angular/router';
   import { AuthService } from '../services/auth.service';

   @Injectable({
     providedIn: 'root'
   })
   export class AuthGuard implements CanActivate {
     constructor(private authService: AuthService, private router: Router) {}

     canActivate(): boolean {
       if (!this.authService.isLoggedIn()) {
         // Not logged in, redirect to login
         this.router.navigate(['/login']);
         return false;
       }
       return true;
     }
   }
   ```
3. **Update** `app-routing.module.ts` to apply the guard:
   ```typescript
   import { AuthGuard } from './guards/auth.guard';

   const routes: Routes = [
     { path: '', component: HomeComponent },
     { path: 'posts', component: PostListComponent },
     { path: 'post/:id', component: PostDetailComponent },
     { path: 'create', component: PostFormComponent, canActivate: [AuthGuard] },
     { path: 'edit/:id', component: PostFormComponent, canActivate: [AuthGuard] },
     { path: 'login', component: LoginComponent },
     { path: 'register', component: RegisterComponent },
     { path: '**', component: NotFoundComponent }
   ];
   ```
4. Now, only logged-in users (those who have a token in localStorage) can access `/create` and `/edit/:id`.

**Verification**:
- **Logout** or clear localStorage. Then navigate to [http://localhost:4200/create](http://localhost:4200/create). You should be redirected to `/login`.  
- **Login**, then go to `/create` again. Now you can access the form.

---

## Step 12. Final Testing & Integration Checks

1. **Make sure** your **backend** (Node/Express) is running on port `3000`.  
2. **Run** your Angular app with `npm start` (which uses the proxy).  
3. **Open** [http://localhost:4200](http://localhost:4200):
   - **Registration**: Create a new user. Check DB.  
   - **Login**: Ensure token is stored in localStorage.  
   - **Create Post**: Possibly require login if using the guard. Test file upload if your backend supports it.  
   - **View Post List**: Confirm data from the DB is displayed.  
   - **Edit** or **Delete** a post.  
   - **Navigation**: Click the navbar items.  
   - **NotFound**: Test an invalid URL.  
4. **Check** your **console** (both Angular and Node) for any errors.  
5. If everything works:
   - You have a fully functional **Angular 17** + **Node/Express** blog app with **basic authentication**, **CRUD**, and **routing**.

---

# Done!

You’ve now built an **Angular 17** blog frontend that **connects** to your **existing Node/Express** backend. Each step had a **testing** or **verification** procedure, so if you followed them closely, your app should be fully operational.

**If** you have any errors or want to add more features (like advanced styling, pagination, or OAuth via Azure), you can expand from here. But this guide ensures the fundamental flows—**register, login, post creation, editing, reading, deletion**—are all present and tested. 

**Happy coding!**
