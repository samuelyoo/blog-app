Development Log: Full-Stack Blog Application
1. Initial Setup
Initialized Node.js project and created a Git repository to manage version control.
2. Project Structure
Organized the project using MVC architecture with folders for controllers, models, routes, config, middleware, and uploads.
3. Backend Setup
Installed Express for server handling and routing.
Set up MongoDB with Mongoose for data storage and schema management.
4. Authentication
Implemented local authentication using JWT (jsonwebtoken) and bcrypt for password hashing.
Integrated OAuth2 via passport-azure-ad-oauth2 for Azure Active Directory authentication.
5. Blog Post Management
Built API routes for CRUD operations on blog posts, using Multer to handle file uploads (e.g., images or documents).
6. JWT Middleware
Secured routes with JWT authentication, ensuring only authenticated users could access sensitive data.
7. Logging and Monitoring
Set up Winston for logging application events and errors to both the console and log files.
8. Frontend Development
Developed the frontend using Angular 17 and Bootstrap 5 for a responsive, user-friendly UI.
Implemented Angular services for communication with the backend API and routing for navigation.
9. Integration and Testing
Ensured smooth integration between backend API and frontend, with extensive testing of all endpoints using Postman.
10. Deployment
Prepared Angular for production, with options for integrated deployment or separate hosting (e.g., AWS S3 for the frontend, cloud-based hosting for the backend).

Frontend Development Log: Full-Stack Blog Application
1. Project Setup
Action: Created Angular 17 project using ng new blog-frontend.
Reason: Set up the initial structure for the frontend.
2. Installed Dependencies
Action: Installed Bootstrap 5 for responsive design.
bash
Copy
npm install bootstrap@5
Reason: Ensured the frontend is mobile-responsive and user-friendly.
3. Routing Setup
Action: Configured Angular Routing in app-routing.module.ts for navigation between components (Home, Post List, Login, Register).
Reason: Enabled seamless page navigation within the app.
typescript
Copy
const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'posts', component: PostListComponent },
  { path: 'login', component: LoginComponent }
];
4. Components Development
Action: Developed key components:
Navbar: Navigation bar.
Home: Welcome screen with app info.
Post List: Displays list of blog posts.
Post Detail: Shows individual post content.
Post Form: Form for creating/editing posts (with file upload support).
Login & Register: User authentication forms.
Reason: Built a clean and organized UI for user interaction.
5. Services for API Communication
Action: Created Angular services to interact with the backend API:
PostService for fetching and managing blog posts.
AuthService for user authentication and token management.
typescript
Copy
getPosts(): Observable<Post[]> {
  return this.http.get<Post[]>(this.baseUrl);
}
Reason: Enabled frontend to communicate with the backend for data handling and authentication.
6. Forms and Validation
Action: Used Reactive Forms to handle form validations for login, registration, and post creation.
typescript
Copy
this.loginForm = this.fb.group({
  email: ['', [Validators.required, Validators.email]],
  password: ['', [Validators.required]]
});
Reason: Managed form controls with validation to ensure correct data entry.
7. Proxy Setup
Action: Set up proxy.conf.json to bypass CORS during development and connect to the backend API.
json
Copy
{
  "/api": {
    "target": "http://localhost:3000",
    "secure": false
  }
}
Reason: Allowed local development without CORS issues by proxying API requests.
8. Responsive UI Design
Action: Designed a responsive UI using Bootstrap 5 grid system for mobile-first layout.
Reason: Ensured the application is accessible and usable across devices.
9. Testing and Debugging
Action: Verified component functionality, routing, and API communication using Angular Dev Server and browser developer tools.
Reason: Ensured that the frontend components work as expected and communicate properly with the backend.
10. Build and Deployment
